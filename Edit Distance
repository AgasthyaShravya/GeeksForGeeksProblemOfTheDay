02-08-2024
class Solution {
    public int editDistance(String str1, String str2) {
        int m = str1.length();
        int n = str2.length();
        
        // Create a DP array to memoize the minimum edit distance
        int[][] dp = new int[m + 1][n + 1];
        
        // Initialize the DP array
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                if (i == 0) {
                    dp[i][j] = j; // If str1 is empty, insert all characters of str2
                } else if (j == 0) {
                    dp[i][j] = i; // If str2 is empty, remove all characters of str1
                } else if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1]; // Characters match, no operation needed
                } else {
                    dp[i][j] = 1 + Math.min(dp[i - 1][j],   // Remove
                                            Math.min(dp[i][j - 1],   // Insert
                                                     dp[i - 1][j - 1])); // Replace
                }
            }
        }
        
        return dp[m][n];
    }
}
