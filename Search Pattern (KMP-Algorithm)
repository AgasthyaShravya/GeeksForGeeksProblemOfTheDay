class Solution {

    ArrayList<Integer> search(String pat, String txt) {
        ArrayList<Integer> result = new ArrayList<>();
        int m = pat.length();
        int n = txt.length();

        // Edge case: pattern longer than text
        if (m > n) {
            return result;
        }

        // Convert strings to char arrays for faster access
        char[] textArray = txt.toCharArray();
        char[] patternArray = pat.toCharArray();

        // Step 1: Create LPS Array
        int[] lps = createLPS(patternArray);

        // Step 2: Search using KMP
        int i = 0, j = 0;
        while (i < n) {
            if (patternArray[j] == textArray[i]) {
                i++;
                j++;
            }

            if (j == m) {
                result.add(i - j); // Match found
                j = lps[j - 1]; // Continue searching
            } else if (i < n && patternArray[j] != textArray[i]) {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }

        return result;
    }

    private int[] createLPS(char[] pat) {
        int m = pat.length;
        int[] lps = new int[m];
        int len = 0;
        int i = 1;

        while (i < m) {
            if (pat[i] == pat[len]) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }
}
