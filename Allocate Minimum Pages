class Solution {
    public int findPages(int[] arr, int k) {
        int n = arr.length;

        if (k > n) return -1;

        int low = arr[0], high = 0;
        for (int pages : arr) {
            low = Math.max(low, pages); 
            high += pages;             
        }

        int result = -1;
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (isPossible(arr, n, k, mid)) {
                result = mid; 
                high = mid - 1; 
            } else {
                low = mid + 1; 
            }
        }

        return result;
    }

    private boolean isPossible(int[] arr, int n, int k, int maxPages) {
        int studentCount = 1;
        int currentSum = 0;

        for (int i = 0; i < n; i++) {
            if (arr[i] > maxPages) return false; 
            if (currentSum + arr[i] > maxPages) {
                studentCount++;
                currentSum = arr[i];

                if (studentCount > k) return false; 
            } else {
                currentSum += arr[i];
            }
        }

        return true;
    }
}
