class Solution {
    public int getMinDiff(int k, int[] arr) {
        if (arr == null || arr.length == 0) return 0;

        // Sort the array
        Arrays.sort(arr);
        int n = arr.length;

        // Initial difference between the maximum and minimum heights
        int initialDiff = arr[n - 1] - arr[0];

        // Define the smallest and largest after the transformation
        int smallest = arr[0] + k;
        int largest = arr[n - 1] - k;

        // Ensure smallest is actually smaller than largest
        if (smallest > largest) {
            int temp = smallest;
            smallest = largest;
            largest = temp;
        }

        // Traverse the array and compute the minimum difference
        for (int i = 0; i < n - 1; i++) {
            int minHeight = Math.min(smallest, arr[i + 1] - k);
            int maxHeight = Math.max(largest, arr[i] + k);
            initialDiff = Math.min(initialDiff, maxHeight - minHeight);
        }

        return initialDiff;
    }
}
