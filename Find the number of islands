import java.util.Stack;

class Solution {
    // Function to find the number of islands.
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) {
            return 0;
        }

        int numIslands = 0;
        int n = grid.length;
        int m = grid[0].length;

        // Iterate over the entire grid.
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                // If a land is found, start an iterative DFS and count an island.
                if (grid[i][j] == '1') {
                    numIslands++;
                    dfsIterative(grid, i, j, n, m);
                }
            }
        }
        return numIslands;
    }

    // Perform an iterative DFS using a stack to avoid StackOverflowError.
    private void dfsIterative(char[][] grid, int i, int j, int n, int m) {
        // Directions for 8 neighbors (up, down, left, right, diagonals).
        int[] rowDir = {-1, 1, 0, 0, -1, -1, 1, 1};
        int[] colDir = {0, 0, -1, 1, -1, 1, -1, 1};

        // Stack to store the positions to explore.
        Stack<int[]> stack = new Stack<>();
        stack.push(new int[]{i, j});

        // Mark the starting cell as visited by turning it into water.
        grid[i][j] = '0';

        while (!stack.isEmpty()) {
            int[] current = stack.pop();
            int x = current[0];
            int y = current[1];

            // Explore all 8 possible directions.
            for (int d = 0; d < 8; d++) {
                int newX = x + rowDir[d];
                int newY = y + colDir[d];

                // Check if the new position is within bounds and is land.
                if (newX >= 0 && newX < n && newY >= 0 && newY < m && grid[newX][newY] == '1') {
                    // Mark it as visited and push to the stack for further exploration.
                    grid[newX][newY] = '0';
                    stack.push(new int[]{newX, newY});
                }
            }
        }
    }
}
